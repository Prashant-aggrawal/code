Single Number


Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4



Sol


class Solution {
    public int singleNumber(int[] nums) {
        
        int n=nums.length;
        
        int res=nums[0];
        for(int i=1;i<n;i++)
        {
            res=res^nums[i];
        }
        
        return  res;
        
    }
}



      class Solution {
    public int singleNumber(int[] nums) {
        
        Set<Integer> map=new HashSet<>();
        
           for(int arr:nums)
           {
               if(!map.contains(arr))
               {
                   map.add(arr);
                   continue;
               }
               if(map.contains(arr))
               {
                   map.remove(arr);
               }
           }
        int ans=-1;
        for(Integer num:map)
        {
           ans=num; 
        }
        return ans;
    }
}