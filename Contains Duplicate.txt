Contains Duplicate

Given an array of integers, find if the array contains any duplicates.

Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.

Example 1:

Input: [1,2,3,1]
Output: true
Example 2:

Input: [1,2,3,4]
Output: false
Example 3:

Input: [1,1,1,3,3,4,3,2,4,2]
Output: true




Sol

class Solution {
    public boolean containsDuplicate(int[] nums) {
        
        int n=nums.length;
        Arrays.sort(nums);
        if(n==0 || n==1)
        {
            return false;
        }
        int j=1;
        for(int i=0;i<n-1;i++)
        {
            
            if(nums[i]!=nums[j++])
            {
                 
                continue;
               
            }
            else
            {
                 
            return true;
               }
        }
        
        return false;
    }
}






For certain test cases with not very large nn, the runtime of this method can be slower than Approach #2. The reason is hash table has some overhead in maintaining its property. One should keep in mind that real world performance can be different from what the Big-O notation says. The Big-O notation only tells us that for sufficiently large input, one will be faster than the other. Therefore, when nn is not sufficiently large, an O(n)O(n) algorithm can be slower than an O(n \log n)O(nlogn) algorithm.