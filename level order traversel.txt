Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]



Sol:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        
        if(root==null)
        {
            return result;
        }
        
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        int i=0;
        int currentLevel=1;
        int nextLevel=0;
        
        while(!queue.isEmpty())
        {
            TreeNode node=queue.remove();
            if(i==result.size())
            {
                result.add(new ArrayList<Integer>());
            }
            result.get(i).add(node.val);
            if(node.left!=null)
            {
                queue.add(node.left);
                nextLevel++;
                
            }
            if(node.right!=null)
            {
                queue.add(node.right);
                nextLevel++;
                
            }
            
            currentLevel--;
            
            if(currentLevel==0)
            {
                i++;
                currentLevel=nextLevel;
                nextLevel=0;
            }
            
        }
        
        
        return result;
    }
}