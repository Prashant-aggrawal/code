. Search in Rotated Sorted Array



Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).




Solution

class Solution {
	public int search(int[] nums, int target) {
   
        int n=nums.length;
        int lo=0,hi=n-1;
        return searchnew(nums, lo, hi, target);
    }
        
         static int searchnew(int nums[], int lo, int hi, int target) 
    { 
       
        if(lo>hi)
        {
            return -1;
        }
        
        int mid=(lo+hi)/2;
        if(nums[mid]==target)
            return mid;
        
        if(nums[lo]<=nums[mid])
        {
            if(target>=nums[lo] && target<=nums[mid])
            {
                return searchnew(nums,lo,mid-1,target);
            }
            
            return searchnew(nums,mid+1,hi,target);
        }
         if(target>=nums[mid] && target<=nums[hi])
         {
             return searchnew(nums,mid+1,hi,target);
         } 
           return searchnew(nums,lo,mid-1,target);
             
         }
            
    
}