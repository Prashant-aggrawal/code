Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [-231,  231 - 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.



Sol


class Solution {
    public int reverse(int num) {
         // Handling negative numbers 
        boolean negativeFlag = false; 
        if (num < 0) 
        { 
            negativeFlag = true; 
            num = -num ; 
        } 
       
        int prev_rev_num = 0, rev_num = 0; 
        while (num != 0) 
        { 
            int curr_digit = num%10; 
       
            rev_num = (rev_num*10) + curr_digit; 
       
            // checking if the reverse overflowed or not. 
            // The values of (rev_num - curr_digit)/10 and 
            // prev_rev_num must be same if there was no 
            // problem. 
            if ((rev_num - curr_digit)/10 != prev_rev_num) 
            { 
                System.out.println("WARNING OVERFLOWED!!!"); 
                return 0; 
            } 
       
            prev_rev_num = rev_num; 
            num = num/10; 
        } 
       
        return (negativeFlag == true)? -rev_num : rev_num; 
    
        
    }
}