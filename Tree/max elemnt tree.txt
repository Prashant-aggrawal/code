// Java code to Find maximum (or minimum) in 
// Binary Tree 

// A binary tree node 
class Node { 
	int data; 
	Node left, right; 

public Node(int data) 
	{ 
		this.data = data; 
		left = right = null; 
	} 
} 

class BinaryTree { 
	Node root; 

	// Returns the max value in a binary tree 
	static int findMax(Node node) 
	{ 
		if(node==null)
		{
		    return Integer.MIN_VALUE;
		}
		
		int res=node.data;
		int lres=findMax(node.left);
		int rres=findMax(node.right);
		
		if(lres>rres)
		res=lres;
		
		if(rres>lres)
		res=rres;
		
		if(node.data>res)
		{
		    res=node.data;
		}
		
		return res;

		
	} 

	/* Driver program to test above functions */
	public static void main(String args[]) 
	{ 
		BinaryTree tree = new BinaryTree(); 
		tree.root = new Node(15); 
		tree.root.left = new Node(7); 
		tree.root.right = new Node(5); 
		tree.root.left.right = new Node(6); 
		tree.root.left.right.left = new Node(1); 
		tree.root.left.right.right = new Node(11); 
		tree.root.right.right = new Node(9); 
		tree.root.right.right.left = new Node(4); 

		System.out.println("Maximum element is " + 
						tree.findMax(tree.root)); 
	} 
} 

/Iteretaive




// Java code to Find maximum (or minimum) in 
// Binary Tree 
import java.util.*;
// A binary tree node 
class Node { 
	int data; 
	Node left, right; 

public Node(int data) 
	{ 
		this.data = data; 
		left = right = null; 
	} 
} 

class BinaryTree { 
	static Node root; 

	// Returns the max value in a binary tree 
	static int findMax(Node node) 
	{ 
		if(node==null)
		{
		    return Integer.MIN_VALUE;
		}
		int max=Integer.MIN_VALUE;
		int res=node.data;
		Queue<Node> q=new LinkedList<>();
		q.offer(root);
		
		while(!q.isEmpty())
		{
		    Node temp=q.poll();
		    if(temp.data>max)
		    {
		        max=temp.data;
		    }
		    if(temp.left!=null)
		    q.offer(temp.left);
		    
		    
		    if(temp.right!=null)
		    q.offer(temp.right);
		    
		   
		}
		
		 return max;
	} 
