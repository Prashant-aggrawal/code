Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3


Solution Recursive:

class Solution {
  public void construct_paths(TreeNode root, String path, LinkedList<String> paths) {
    if (root != null) {
      path += Integer.toString(root.val);
      if ((root.left == null) && (root.right == null))  // if reach a leaf
        paths.add(path);  // update paths
      else {
        path += "->";  // extend the current path
        construct_paths(root.left, path, paths);
        construct_paths(root.right, path, paths);
      }
    }
  }

  public List<String> binaryTreePaths(TreeNode root) {
    LinkedList<String> paths = new LinkedList();
    construct_paths(root, "", paths);
    return paths;
  }
}



Solution Iterative:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        
        LinkedList<String> paths=new LinkedList<>();
        if (root == null)
      return paths;
        
        LinkedList<TreeNode> nodestack=new LinkedList<>();
        LinkedList<String> pathstack=new LinkedList<>();
        
        nodestack.add(root);
        pathstack.add(Integer.toString(root.val));
        TreeNode node;
        String path;
        
        while(!nodestack.isEmpty())
        {
            node=nodestack.pollLast();
            path=pathstack.pollLast();
            if ((node.left == null) && (node.right == null))
            {
                paths.add(path);
            }
            
             if (node.left != null)
                 {
                     nodestack.add(node.left);
                     pathstack.add(path + "->" +Integer.toString(node.left.val));
                 }
            
            if (node.right != null) {
        nodestack.add(node.right);
        pathstack.add(path + "->" + Integer.toString(node.right.val));
      }
        }
        return paths;
        
    }
    
    
}