Matrix Search
Write an efficient algorithm that searches for a value in an m x n matrix.

This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row.
Example:

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return 1 ( 1 corresponds to true )

Return 0 / 1 ( 0 if the element is not present, 1 if the element is present ) for this problem


MAtrix search:

1.Geeks for Geeks

https://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/



2.public class Solution {
    public int searchMatrix(ArrayList<ArrayList<Integer>> a, int b) {
          if (a.size() == 0) return 0;
        return binarySearch(a, 0, a.size()-1, a.get(0).size()-1, b);
    }
    
    public int binarySearch(ArrayList<ArrayList<Integer>> a, int start, int end, int subSize, int b) {
        while (start <=  end) {
            int mid = (start + end)/2;
            if (a.get(mid).get(0) == b) return 1;
            if (a.get(mid).get(subSize) == b) return 1;
            
            if (a.get(mid).get(0) > b) {
                end = mid-1;
            } 
            else if (a.get(mid).get(0) < b && a.get(mid).get(subSize) < b) {
                start = mid + 1;
            }
            else {
                return binarySearchSubArray(a.get(mid), 0, subSize, b); 
            }
        }
        return 0;
    }
    
    public int binarySearchSubArray(ArrayList<Integer> a, int start, int end, int b) {
        while (start <= end) {
            int mid = (start + end)/2;
            if (a.get(mid) == b) {
                return 1;
            }
            else if (a.get(mid) < b) {
                start = mid + 1;
            }
            else {
                end = mid - 1;
            }
        }
        return 0;
    }
}



