70. Climbing Stairs 
 
 
 
 

 
 
 
 

Average Rating: 4.88 (98 votes)

Jan. 31, 2017  |  79.9K views
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
Summary
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Solution
Approach 1: Brute Force
Algorithm

In this brute force approach we take all possible step combinations i.e. 1 and 2, at every step. At every step we are calling the function climbStairsclimbStairs for step 11 and 22, and return the sum of returned values of both functions.

climbStairs(i,n)=(i + 1, n) + climbStairs(i + 2, n)
climbStairs(i,n)=(i+1,n)+climbStairs(i+2,n)

where ii defines the current step and nn defines the destination step.


Complexity Analysis

Time complexity : O(2^n)O(2 
n
 ). Size of recursion tree will be 2^n2 
n
 .

Recursion tree for n=5 would be like this:

Climbing_Stairs

Space complexity : O(n)O(n). The depth of the recursion tree can go upto nn. 


Approach 2: Recursion with memorization
Algorithm

In the previous approach we are redundantly calculating the result for every step. Instead, we can store the result at each step in memomemo array and directly returning the result from the memo array whenever that function is called again.

In this way we are pruning recursion tree with the help of memomemo array and reducing the size of recursion tree upto nn.


Complexity Analysis

Time complexity : O(n)O(n). Size of recursion tree can go upto nn.

Space complexity : O(n)O(n). The depth of recursion tree can go upto nn. 


Approach 3: Dynamic Programming
Algorithm

As we can see this problem can be broken into subproblems, and it contains the optimal substructure property i.e. its optimal solution can be constructed efficiently from optimal solutions of its subproblems, we can use dynamic programming to solve this problem.

One can reach i^{th}i 
th
  step in one of the two ways:

Taking a single step from (i-1)^{th}(i−1) 
th
  step.

Taking a step of 22 from (i-2)^{th}(i−2) 
th
  step.

So, the total number of ways to reach i^{th}i 
th
  is equal to sum of ways of reaching (i-1)^{th}(i−1) 
th
  step and ways of reaching (i-2)^{th}(i−2) 
th
  step.

Let dp[i]dp[i] denotes the number of ways to reach on i^{th}i 
th
  step:

dp[i]=dp[i-1]+dp[i-2]
dp[i]=dp[i−1]+dp[i−2]

Example:

Current
7 / 7

Complexity Analysis

Time complexity : O(n)O(n). Single loop upto nn.

Space complexity : O(n)O(n). dpdp array of size nn is used. 
