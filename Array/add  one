Given a non-negative number represented as an array of digits,

add 1 to the number ( increment the number represented by the digits ).

The digits are stored such that the most significant digit is at the head of the list.

Example:

If the vector has [1, 2, 3]

the returned vector should be [1, 2, 4]

as 123 + 1 = 124.

 NOTE: Certain things are intentionally left unclear in this question which you should practice asking the interviewer.
For example, for this problem, following are some good questions to ask :
Q : Can the input have 0’s before the most significant digit. Or in other words, is 0 1 2 3 a valid input?
A : For the purpose of this question, YES
Q : Can the output have 0’s before the most significant digit? Or in other words, is 0 1 2 4 a valid output?
A : For the purpose of this question, NO. Even if the input has zeroes before the most significant digit.



Solution:

public class Solution {
    public ArrayList<Integer> plusOne(ArrayList<Integer> A) {
         int carry = 1;
        ArrayList<Integer> result = new ArrayList<>(A);
        int len = A.size();
        for (int i = len - 1; i >= 0; i--) {
            if (carry == 0) {
                // no need to check remaining digits
                break;
            }
            int digit = A.get(i);
            // plus 
            int num = digit + carry;
            if (num >= 10) {
                carry = num / 10;
                digit = num % 10;
            } else {
                carry = 0;
                digit = num;
            }
            result.set(i, digit);
        }
        // if 9 9 9
        if (carry != 0) {
            result.add(0, 1);
        }
        // removing leading zeros
        int index = 0;
        while (index < result.size() && result.get(index) == 0) {
            result.remove(index);
        }
        
        return result;
    }
}


Sol2:

class Solution {
    public int[] plusOne(int[] digits) {
        
    int n = digits.length;
    for(int i=n-1; i>=0; i--) {
        if(digits[i] < 9) {
            digits[i]++;
            return digits;
        }
        
        digits[i] = 0;
    }
    
    int[] newNumber = new int [n+1];
    newNumber[0] = 1;
    
    return newNumber;
}
}
